Unique path-2 problem


//Recurssion
int func(int i,int j,vector<vector<int>> &mat)
{
    if(i>=0 && j>=0 && mat[i][j]==-1)
    {
        return 0;
    }

    if(i==0 && j==0)
    {
        return 1;
    }

    if(i<0 || j<0)
    {
        return 0;
    }

    int up = func(i-1,j,mat);
    int left = func(i,j-1,mat);

    return up + left;

}

int mazeObstacles(int n, int m, vector< vector< int> > &mat) 
{
    // Write your code here
    int mod=1e9+7;
    return func(n-1,m-1,mat)%mod;
}


//Memoization
int func(int i,int j,vector<vector<int>> dp,vector< vector< int> > &mat)
{
    if(i>=0 && j>=0 && mat[i][j]==-1)
    {
        return 0;
    }

    if(i==0 && j==0)
    {
        return 1;
    }

    if(i<0 || j<0)
    {
        return 0;
    }

    if(dp[i][j]!=-1)
    {
        return dp[i][j];
    }

    int up = func(i-1,j,dp,mat);
    int left = func(i,j-1,dp,mat);

    
    return dp[i][j] = up+left;
}
int mazeObstacles(int n, int m, vector< vector< int> > &mat) 
{
    vector<vector<int>> dp(n,vector<int> (m,-1));
    return func(n-1,m-1,dp,mat);
}


//Tabulation
int  mod=(int)(1e9+7);
int mazeObstacles(int n, int m, vector< vector< int> > &mat) 
{
    vector<vector<int>> dp(n,vector<int> (m,-1));
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(mat[i][j]==-1)
            {
                dp[i][j]=0;
                continue;
            }

            if(i==0 && j==0)
            {
                dp[i][j]=1;
                continue;
            }
            
            
            int up=0;
            int left=0;

            if(i>0)
            {
                up=dp[i-1][j];
            }

            if(j>0)
            {
                left=dp[i][j-1];
            }

            dp[i][j]=(up+left)%mod;
            
        }
    }

    return dp[n-1][m-1];
}
