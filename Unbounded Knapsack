//recurssion
int func(int i,int w, vector<int> &profit, vector<int> &weight)
{
    if(i==0)
    {
        return (w/weight[0])*profit[0];
    }

    // 
    int not_take = 0 + func(i-1,w,profit,weight);

    int take = -1e9;

    if(w>=weight[i])
    {
        take = profit[i] + func(i,w-weight[i],profit,weight);
    }

    return max(not_take,take);
}

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    return func(n-1,w,profit,weight);
}


//memoization
int func(int i,int w, vector<int> &profit, vector<int> &weight,vector<vector<int>>& dp)
{
    if(i==0)
    {
        return (w/weight[0])*profit[0];
    }

    if(dp[i][w]!=-1)
    {
        return dp[i][w];
    }

    int not_take = 0 + func(i-1,w,profit,weight,dp);

    int take = -1e9;

    if(w>=weight[i])
    {
        take = profit[i] + func(i,w-weight[i],profit,weight,dp);
    }

    return dp[i][w] = max(not_take,take);
}

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    vector<vector<int>> dp(n,vector<int> (w+1,-1));
    return func(n-1,w,profit,weight,dp);
}



//tabulation
int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    vector<vector<int>> dp(n,vector<int> (w+1,0));
    
    for(int i=0;i<=w;i++)
    {
        dp[0][i] = (int)(i/weight[0]*profit[0]);
    }

    for(int i=1;i<n;i++)
    {
        for(int w1=0;w1<=w;w1++)
        {
            int not_take = 0+dp[i-1][w1];

            int take =-1e9;
            
            if(w1>=weight[i])
            {
                take = profit[i]+dp[i][w1-weight[i]];
            }

            dp[i][w1]=max(take,not_take);
        }
    }

    return dp[n-1][w];
}

