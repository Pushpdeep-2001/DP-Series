// this question is similar as DP-14 problem the only difference is that there we only have to return true or false but here we need to return count of subsets wuth sum K


//recurssion
int mod = 1e9+7;

int func(int idx,int target,vector<int>& arr)
{
	if(idx==0)
	{
		if(target==0 && arr[0]==0)
        {
            return 2;
        }

        if(target==0 || target==arr[0])
        {
            return 1;
        }

        return 0;
	}


	int np = func(idx-1,target,arr);

	int p = 0;

	if(target>=arr[idx])
	{
		p = func(idx-1,target-arr[idx],arr);
	}

	return (np + p)%mod;
}

int findWays(vector<int>& arr, int k)
{
	int n = arr.size();

	return func(n-1,k,arr);
	
}



//memoization
int mod = 1e9+7;

int func(int idx,int target,vector<int>& arr,vector<vector<int>>& dp)
{

	if(idx==0)
	{
		if(target==0 && arr[0]==0)  return 2;
        if(target==0 || target==arr[0])   return 1;

        return 0;
	}

	if(dp[idx][target]!=-1)
	{
		return dp[idx][target];
	}

	int np = func(idx-1,target,arr,dp);

	int p = 0;

	if(target>=arr[idx])
	{
		p = func(idx-1,target-arr[idx],arr,dp);
	}

	return dp[idx][target] = (np + p)%mod;
}

int findWays(vector<int>& arr, int k)
{
	int n = arr.size();
	vector<vector<int>> dp(n+1,vector<int> (k+1,-1));

	return func(n-1,k,arr,dp);
	
}


//tabulation
int mod=1e9+7;

int findWays(vector<int>& arr, int k)
{
	int n = arr.size();

	vector<vector<int>> dp(n+1, vector<int> (k+1,0));
	

	for(int i=0;i<n;i++)
	{
		dp[i][0] = 1;
	}

	if(arr[0]<=k)
	{
		dp[0][arr[0]]=1;
	}

	for(int idx=1;idx<n;idx++)
	{
		for(int target=1;target<=k;target++)
		{
			int np = dp[idx-1][target];
			
			int p = 0;

			if(target>=arr[idx])
			{
				p = dp[idx-1][target-arr[idx]];
			}

			dp[idx][target] = (np+p)%mod;
		}
	}


	return dp[n-1][k];

}
