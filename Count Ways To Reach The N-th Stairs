code studio


// recursive approach
int func(int n)
{
    if(n==0)
    {
        return 1;
    }

    if(n==1)
    {
        return 1;
    }

    int left=func(n-1);
    int right=func(n-2);

    return left+right;
}

int countDistinctWays(int nStairs) 
{
    int n=nStairs;
    return func(n);
}


// it can also be done by memoization.
int func(int n,vector<int>& dp)
{
    if(n==0)
    {
        return 1;
    }

    if(n==1)
    {
        return 1;
    }

    if(dp[n]!=-1)
    {
        return dp[n];
    }

    int left=func(n-1,dp);
    int right=func(n-2,dp);

    return dp[n]=left+right;
}

int countDistinctWays(int nStairs) 
{
    int n=nStairs;
    vector<int> dp(n+1,-1);
    return func(n,dp);
}

//this is tabulation
int func(int n,vector<int>& dp)
{
    dp[0]=1;
    dp[1]=1;

    for(int i=2;i<=n;i++)
    {
        dp[i]=dp[i-1]+dp[i-2];
    }

    return dp[n];
}

int countDistinctWays(int nStairs) 
{
    int n=nStairs;
    vector<int> dp(n+1,-1);
    return func(n,dp);
}


// this is a space optimization way .
int countDistinctWays(int nStairs) 
{
    int prev=1;
    int prev2=1;

    for(int i=2;i<=nStairs;i++)
    {
        int curr_i=prev+prev2;
        prev2=prev;
        prev=curr_i;
    }

    return prev;
}
