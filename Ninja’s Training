code studion:-codestudio/problems/ninja-s-training_


//recurssive approach
int func(int day,int last,vector<vector<int>> &points)
{
    if(day==0)
    {
        int  maxi=0;
        for(int i=0;i<=2;i++)
        {
            if(i!=last)
            {
                maxi=max(maxi,points[0][i]);
            }
        }

        return maxi;
    }

    int maxi=0;
    int point=0;

    for(int activity=0;activity<=2;activity++)
    {
        if(activity!=last)
        {
            point=points[day][activity]+func(day-1,activity,points);
            maxi=max(maxi,point);
        }
    }

    return maxi;
}

int ninjaTraining(int n, vector<vector<int>> &points)
{
    int N=n-1;
    return func(N,3,points);
}



//memoization approach
int func(int day,int last,vector<vector<int>>& points,vector<vector<int>>& dp)
{
    if(day==0)
    {
        int maxi=0;
        for(int i=0;i<=2;i++)
        {
            if(i!=last)
            {
                maxi=max(maxi,points[0][i]);
            }
        }

        return maxi;
    }

    if(dp[day][last]!=-1)
    {
        return dp[day][last];
    }

    int maxi=0;
    int point=0;

    for(int i=0;i<=2;i++)
    {
        if(i!=last)
        {
            point = points[day][i]+func(day-1,i,points,dp);
            maxi=max(maxi,point);
        }
    }

    return dp[day][last]=maxi;;
}

int ninjaTraining(int n, vector<vector<int>> &points)
{
    int N=n-1;
    vector<vector<int>> dp(n,vector<int> (4,-1));
    return func(N,3,points,dp);
}



// Tabulation
int ninjaTraining(int n, vector<vector<int>> &points)
{
    int N=n-1;
    vector<vector<int>> dp(n,vector<int> (4,-1));
    
    //base cases
    dp[0][0]=max(points[0][1],points[0][2]);
    dp[0][1]=max(points[0][0],points[0][2]);
    dp[0][2]=max(points[0][0],points[0][1]);
    dp[0][3]=max(points[0][0],max(points[0][1],points[0][2]));

    int maxi=0;
    int point=0;

    for(int day=1;day<=n-1;day++)
    {
        for(int last=0;last<=3;last++)
        {
            int maxi=0;
            dp[day][last]=0;
            
            for(int task=0;task<3;task++)
            {
                if(task!=last)
                {
                    int point=points[day][task]+dp[day-1][task];
                    maxi=max(maxi,point);
                }

                dp[day][last]=maxi;
            }
            
        }
        
        
    }

    return dp[n-1][3];
    
}
