

//Recurssion
bool func(int idx,int target,vector<int> &arr)
{
    if(target==0)
    {
        return true;
    }

    if(idx==0)
    {
        return (arr[0]==target);
    }

    bool not_taken = func(idx-1,target,arr);

    bool taken = false;

    if(target>=arr[idx])
    {
        taken = func(idx-1,target-arr[idx],arr);
    }

    return taken||not_taken;
}

bool subsetSumToK(int n, int k, vector<int> &arr) 
{
    // Write your code here.
    int idx = n-1;
    int target = k;
    return func(idx,target,arr);
}



//memoization
bool func(int idx,int target,vector<int> &arr,vector<vector<int>>& dp)
{
    if(target==0)
    {
        return true;
    }

    if(idx==0)
    {
        return (arr[0]==target);
    }

    if(dp[idx][target]!=-1)
    {
        return dp[idx][target];
    }

    bool not_taken = func(idx-1,target,arr,dp);

    bool taken = false;

    if(target>=arr[idx])
    {
        taken = func(idx-1,target-arr[idx],arr,dp);
    }

    return dp[idx][target] = taken||not_taken;
}

bool subsetSumToK(int n, int k, vector<int> &arr) 
{
    // Write your code here.
    int idx = n-1;
    int target = k;
    vector<vector<int>> dp(1000+1,vector<int>(1000+1,-1));
    return func(idx,target,arr,dp);
}



//Tabulation
 
bool subsetSumToK(int n, int k, vector<int> &arr) 
{
    vector<vector<bool>> dp(n+1,vector<bool> (k+1,false));
    
    for(int i=0;i<n;i++)
    {
        dp[i][0]=true;
    }

    dp[0][arr[0]]=true;

    
    for(int idx=1;idx<n;idx++)
    {
        for(int target=1;target<=k;target++)
        {
            bool not_taken = dp[idx-1][target];

            bool taken = false;
            
            if(target>=arr[idx])
            {
                taken = dp[idx-1][target-arr[idx]];
            }

            dp[idx][target] = not_taken||taken;
        }
    }


    return dp[n-1][k];
}
