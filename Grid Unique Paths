This question is very important to understand basics of 2d DP, we will be using knowledge of Recurssion in this question lecture 7 recurssion by striver.

Q.There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right 
  corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time. Given the two integers m and n, return the number of 
  possible unique paths that the robot can take to reach the bottom-right corner.

//This question be solved using graph also but now we will be solving using DP

//Recussion
int func(int i,int j)
    {
        if(i==0 && j==0)
        {
            return 1;
        }

        if(i<0 || j<0)
        {
            return 0;
        }

        int up = func(i-1,j);
        int left = func(i,j-1);

        return left+up;
    }

    int uniquePaths(int m, int n) 
    {
        int i=m-1;
        int j=n-1;

        return func(i,j);
    }


//Memoization
int func(int i,int j,vector<vector<int>> dp)
{
        if(i==0 && j==0)
        {
            return 1;
        }

        if(i<0 || j<0)
        {
            return 0;
        }

        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }

        int up = func(i-1,j,dp);
        int left = func(i,j-1,dp);

        return dp[i][j] = up + left;
    }

    int uniquePaths(int m, int n) 
    {
        vector<vector<int>> dp(m,vector<int> (n,-1));
        int i = m-1;
        int j = n-1;

        return func(i,j,dp);
    }

//Tabulation
int uniquePaths(int m, int n) 
    {
        vector<vector<int>> dp(m,vector<int> (n,-1));

        //base case
        dp[0][0]=1;


        // nested for loop
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i==0 && j==0)
                {
                    //because it is already stored at dp[0][0] at base case.
                    continue;
                }

                int left=0;
                int up=0;

                if(i>0)
                {
                    up = dp[i-1][j];
                }

                if(j>0)
                {
                    left = dp[i][j-1];
                }

                dp[i][j] = up+left;
            }
        }

        return dp[m-1][n-1];
    }
