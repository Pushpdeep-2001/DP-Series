This is very important question where we have to move from top row to bottom most row with max path sum, if we are at (row, col) we can move to (row + 1, col - 1),
(row + 1, col), or (row + 1, col + 1).

this similar question can also be solved for minimum path sum.(on leetcode:- MINIMUM FALLING PATH SUM).

//recurssion
#include <bits/stdc++.h> 

int func(int i,int j,vector<vector<int>> &matrix)
{
    if(j<0 || j>=matrix[0].size())
    {
        return -1e9;
    }

    if(i==0)
    {
        return matrix[i][j];
    }

    int up = matrix[i][j] + func(i-1,j,matrix);
    int upr = matrix[i][j] + func(i-1,j+1,matrix);
    int upl = matrix[i][j] + func(i-1,j-1,matrix);

    return max(up,max(upr,upl));

}
int getMaxPathSum(vector<vector<int>> &matrix)
{
    int n = matrix.size();
    int m = matrix[0].size();

    int result = INT_MIN;

    for(int j=0;j<m;j++)
    {
        int ans = func(n-1,j,matrix);
        result = max(result,ans);
    }

    return result;
}



//memoization
#include <bits/stdc++.h> 

int func(int i,int j,vector<vector<int>> &matrix,vector<vector<int>>& dp)
{
    if(j<0 || j>=matrix[0].size())
    {
        return -1e9;
    }

    if(i==0)
    {
        return matrix[i][j];
    }

    if(dp[i][j]!=-1)
    {
        return dp[i][j];
    }

    int up = matrix[i][j] + func(i-1,j,matrix,dp);
    int upr = matrix[i][j] + func(i-1,j+1,matrix,dp);
    int upl = matrix[i][j] + func(i-1,j-1,matrix,dp);

    return dp[i][j] = max(up,max(upr,upl));

}
int getMaxPathSum(vector<vector<int>> &matrix)
{
    int n = matrix.size();
    int m = matrix[0].size();

    vector<vector<int>> dp(n,vector<int> (m,-1));

    int result = INT_MIN;

    for(int j=0;j<m;j++)
    {
        int ans = func(n-1,j,matrix,dp);
        result = max(result,ans);
    }

    return result;
}



//Tabulation
#include <bits/stdc++.h> 

int getMaxPathSum(vector<vector<int>> &matrix)
{
    int n = matrix.size();
    int m = matrix[0].size();
    
    vector<vector<int>> dp(n,vector<int> (m,-1));

    //base case 
    for(int j=0;j<m;j++)
    {
        dp[0][j] = matrix[0][j];
    }

    for(int i=1;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            int up=0;
            int upr=0;
            int upl=0;
            
            up = matrix[i][j] + dp[i-1][j];
            
            if(j<m-1)
            {
                upr = matrix[i][j] + dp[i-1][j+1];
            }
            else
            {
                upr = matrix[i][j] + -1e9;
            }
            
            if(j>=1)
            {
                upl = matrix[i][j] + dp[i-1][j-1];
            }
            else
            {
                upl = matrix[i][j] + -1e9;
            }
            

            dp[i][j] = max(up,max(upl,upr));
        }
    }

    int maxi = INT_MIN;

    for(int j=0;j<m;j++)
    {
        maxi = max(maxi,dp[n-1][j]);
    }

    return maxi;
}
