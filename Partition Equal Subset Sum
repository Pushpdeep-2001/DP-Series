
//recurssion
class Solution {
public:

    bool func(int idx,int target,vector<int>& nums)
    {
        if(target==0)
        {
            return true;
        }

        if(idx==0)
        {
            return (nums[0]==target);
        }


        bool not_taken = func(idx-1,target,nums);

        bool taken = false;

        if(target>=nums[idx])
        {
            taken = func(idx-1,target-nums[idx],nums);
        }

        return not_taken||taken;
    }

    bool canPartition(vector<int>& nums) 
    {
        int n = nums.size();
        int total_sum = 0;

        for(int x:nums)
        {
            total_sum+=x;
        }

        if(total_sum%2!=0)
        {
            return false;
        }

        int target = total_sum/2;
        return func(n-1,target,nums);
    }
};


//memoization
class Solution {
public:

    bool func(int idx,int target,vector<int>& nums,vector<vector<int>>& dp)
    {
        if(target==0)
        {
            return true;
        }

        if(idx==0)
        {
            return (nums[0]==target);
        }

        if(dp[idx][target]!=-1)
        {
            return dp[idx][target];
        }


        bool not_taken = func(idx-1,target,nums,dp);

        bool taken = false;

        if(target>=nums[idx])
        {
            taken = func(idx-1,target-nums[idx],nums,dp);
        }

        return dp[idx][target] = not_taken||taken;
    }

    bool canPartition(vector<int>& nums) 
    {
        int n = nums.size();
        int total_sum = 0;

        for(int x:nums)
        {
            total_sum+=x;
        }

        if(total_sum%2!=0)
        {
            return false;
        }

        int target = total_sum/2;

        vector<vector<int>> dp(n+1,vector<int> (target+1,-1));

        return func(n-1,target,nums,dp);
    }
};



//tabulation
same approach as of previous question....
