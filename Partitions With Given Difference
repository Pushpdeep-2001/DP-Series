In this problem we are given diff = d;
we have two subsets s1 ans s2, s1+s2=s  here sum of s1 elements is sums1 and sum of s2 elements are sums2
sums1 + sums2 = total_sum;
sums1 - sums2 = d;
2*sums1 = total_sum + d
sums1 = (total_sum + d)/2;

so we only need to find those subset whose sum is sums1, buthtere are some constraints
1. total_sum+d>=0
2. total_sum+d must be even
otherwise return 0;

//recurssion
int mod = 1e9+7;
int func(int i,int target,vector<int> &arr)
{
    if(i==0)
    {
        if(target==0 && arr[0]==0)
        {
            return 2;
        }

        if(target==0 || target==arr[0])
        {
            return 1;
        }

        return 0;
    }

    int not_pick = func(i-1,target,arr);

    int pick = 0;

    if(target>=arr[i])
    {
        pick = func(i-1,target-arr[i],arr);
    }

    return (pick + not_pick)%mod;
}

int countPartitions(int n, int d, vector<int> &arr) 
{
    int totsum = 0;
    for(int x:arr)
    {
        totsum+=x;
    }

    if((totsum+d)<0 || (totsum+d)%2!=0)
    {
        return 0;
    }

    return func(n-1,(totsum+d)/2,arr);
}



//memoization
int mod = (int)(1e9+7);
int func(int i,int target,vector<int> &arr,vector<vector<int>>& dp)
{
    if(i==0)
    {
        if(target==0 && arr[0]==0)
        {
            return 2;
        }

        if(target==0 || target==arr[0])
        {
            return 1;
        }

        return 0;
    }

    if(dp[i][target]!=-1)
    {
        return dp[i][target];
    }

    int not_pick = func(i-1,target,arr,dp);

    int pick = 0;

    if(target>=arr[i])
    {
        pick = func(i-1,target-arr[i],arr,dp);
    }

    return dp[i][target] = (pick + not_pick)%mod;
}

int countPartitions(int n, int d, vector<int> &arr) 
{
    int totsum = 0;
    for(int x:arr)
    {
        totsum+=x;
    }

    if((totsum+d)<0 || (totsum+d)%2!=0)
    {
        return 0;
    }

    int target = (totsum+d)/2;

    vector<vector<int>> dp(n,vector<int> (target+1,-1));

    return func(n-1,(totsum+d)/2,arr,dp);
}



//tabulation
int mod = (int)(1e9+7);
int countPartitions(int n, int d, vector<int> &arr) 
{
    int tot_sum=0;
    for(int x:arr)
    {
        tot_sum+=x;
    }

    int tar = (tot_sum+d)/2;

    if((tot_sum+d)<0 || (tot_sum+d)%2!=0)
    {
        return 0;
    }

    vector<vector<int>> dp(n,vector<int>(tar+1,0));

    if(arr[0]==0)
    {
        dp[0][0]=2;
    }
    else
    {
        dp[0][0]=1;
    }

    if(arr[0]!=0 && arr[0]<=tar)
    {
        dp[0][arr[0]]=1;
    }

    for(int i=1;i<n;i++)
    {
        for(int target = 0;target<=tar;target++)
        {
            int not_pick = dp[i-1][target];

            int pick = 0;
            
            if(target>=arr[i])
            {
                pick = dp[i-1][target-arr[i]];
            }
            
            dp[i][target] = (pick+not_pick)%mod;
        }
    }

    return dp[n-1][tar];


}








