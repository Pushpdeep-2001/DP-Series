Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.

//recurssive approach
int func(int i,int j,vector<vector<int>> &grid)
{
    if(i==0 && j==0)
    {
        return grid[0][0];
    }

    if(i<0 || j<0)
    {
        return 1e9;
    }

    int up = grid[i][j] + func(i-1,j,grid);
    int left = grid[i][j] + func(i,j-1,grid);

    return min(up,left);
}

int minSumPath(vector<vector<int>> &grid) 
{
    // Write your code here.
    int n = grid.size();
    int m = grid[0].size();
    
    return func(n-1,m-1,grid);
}


//memoization
#include <bits/stdc++.h> 

int func(int i,int j,vector<vector<int>> &grid, vector<vector<int>> &dp)
{
    if(i==0 && j==0)
    {
        return grid[0][0];
    }

    if(i<0 || j<0)
    {
        return 1e9;
    }

    if(dp[i][j]!=-1)
    {
        return dp[i][j];
    }

    int up = grid[i][j] + func(i-1,j,grid,dp);
    int left = grid[i][j] + func(i,j-1,grid,dp);

    return dp[i][j] = min(up,left);
}

int minSumPath(vector<vector<int>> &grid) 
{
    // Write your code here.
    int n = grid.size();
    int m = grid[0].size();

    vector<vector<int>> dp(n,vector<int> (m,-1));
    return func(n-1,m-1,grid,dp);
}


//Tabulation
int minSumPath(vector<vector<int>> &grid) 
{
    // Write your code here.
    int n = grid.size();
    int m = grid[0].size();

    vector<vector<int>> dp(n,vector<int> (m,-1));

    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(i==0 && j==0)
            {
                dp[i][j]=grid[0][0];
                continue;
            }
            
            int up=0;
            int left=0;
            
            if(i>0)
            {
                up = grid[i][j]+dp[i-1][j];
            }
            else
            {
                up = grid[i][j]+1e9;
            }
            
            if(j>0)
            {
                left = grid[i][j]+dp[i][j-1];
            }
            else
            {
                left = grid[i][j]+1e9;
            }

            dp[i][j]=min(up,left);
        }
    }

    return dp[n-1][m-1];
    
}
