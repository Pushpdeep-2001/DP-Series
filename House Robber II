Code studio:- codestudio/problems/house-robber
Leetcode:-

VI QUESTION

// we have used the same approach in this question which we have used in Maximum sum of non-adjacent elements because here only house are in circle
so In this question our main approach is that if we oick first house then we definietly cannot pick last one, becuase adjacent houses have alarm. hence
its better to make two arrays temp1 and temp2, temp1 excludes first element and have all others, temp2 excludes last element and have all others. now 
we can get the ans by getting the max of both the arrays.
VI question

long long int solve(vector<int>nums)
{
    int n=nums.size();
    
    long long int prev=nums[0];
    long long int prev2=0;

    long long int pick=0;
    long long int not_pick=0;
    
    for(int i=1;i<n;i++)
    {
        if(i>1)
        {
            pick=nums[i]+prev2;
        }
        else
        {
            pick=nums[i]+0;
        }

        not_pick=0+prev;

        long long int curri=max(pick,not_pick);
        prev2=prev;
        prev=curri;
    }

    return prev;
    
}

long long int houseRobber(vector<int>& valueInHouse)
{
    int n=valueInHouse.size();

    if(n==1)
    {
        return valueInHouse[0];
    }
    
    vector<int> temp1,temp2;
    
    for(int i=0;i<n;i++)
    {
        if(i!=0)   temp1.push_back(valueInHouse[i]);
        if(i!=n-1) temp2.push_back(valueInHouse[i]);
    }

    long long int ans1=solve(temp1);
    long long int ans2=solve(temp2);

    return max(ans1,ans2);
    
    
}


