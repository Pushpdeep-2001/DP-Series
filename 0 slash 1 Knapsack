O/1 Knapsack problem


//recurssion
int func(int i,int w,vector<int>& weight,vector<int>& value,vector<vector<int>>& dp)
{
	if(i==0)
	{
		if(weight[0]<=w)
		{
			return value[0];
		}
		else
		return 0;
	}

	int not_pick = 0 + func(i-1,w,weight,value,dp);

	int pick = -1e9;

	if(weight[i]<=w)
	{
		pick = value[i] + func(i-1,w-weight[i],weight,value,dp);
	}

	return max(pick,not_pick);
}

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	int W = maxWeight;
	vector<vector<int>> dp(n,vector<int>(W+1,-1));
	return func(n-1,W,weight,value,dp);
}


//memoization
int func(int i,int w,vector<int>& weight,vector<int>& value,vector<vector<int>>& dp)
{
	if(i==0)
	{
		if(weight[0]<=w)
		{
			return value[0];
		}
		else
		return 0;
	}

	if(dp[i][w]!=-1)
	{
		return dp[i][w];
	}


	int not_pick = 0 + func(i-1,w,weight,value,dp);

	int pick = -1e9;

	if(weight[i]<=w)
	{
		pick = value[i] + func(i-1,w-weight[i],weight,value,dp);
	}

	return dp[i][w] = max(pick,not_pick);
}

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	int W = maxWeight;
	vector<vector<int>> dp(n,vector<int>(W+1,-1));
	return func(n-1,W,weight,value,dp);
}



//tabulation
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
	int MW = maxWeight;

	vector<vector<int>> dp(n,vector<int>(MW+1,0));

	for(int i=weight[0];i<=MW;i++)
	{
		dp[0][i] = value[0];
	}

	for(int i=1;i<n;i++)
	{
		for(int w=0;w<=MW;w++)
		{
			int not_pick = 0+dp[i-1][w];

			int pick=INT_MIN;

			if(weight[i]<=w)
			{
				pick = value[i] + dp[i-1][w-weight[i]];
			}

			dp[i][w] = max(pick,not_pick);
		}
	}

	return dp[n-1][MW];
}
