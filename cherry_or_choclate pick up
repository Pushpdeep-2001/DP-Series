this is one of the most important question of 2d dp

//recurssion
#include <bits/stdc++.h>

int func(int i1,int j1,int i2,int j2,vector<vector<int>>& grid,int n,int m)
{
    if( j1<0 || j1>=m || j2<0 || j2>=m )
    {
        return -1e9;
    }

    if(i1==n-1)
    {
        if(j1==j2)
        {
            return grid[i1][j1];
        }
        else{
            return grid[i1][j1]+grid[i2][j2];
        }
    }

    // explore all possible paths

    int maxi=INT_MIN;

    for(int dj1=-1;dj1<=1;dj1++)
    {
        for(int dj2=-1;dj2<=1;dj2++)
        {
            if(j1==j2)
            {
                maxi = max(maxi,grid[i1][j1]+func(i1+1,j1+dj1,i2+1,j2+dj2,grid,n,m));
            }
            else
            {
                maxi = max(maxi,grid[i1][j1]+grid[i2][j2]+func(i1+1,j1+dj1,i2+1,j2+dj2,grid,n,m));
            }
        }
    }

    return maxi;
}

int maximumChocolates(int r, int c, vector<vector<int>> &grid) 
{
    return func(0,0,0,c-1,grid,r,c);

}


//memoization
// in memoization we wiil write 3d dp in this problem...

#include <bits/stdc++.h>

int func(int i1,int j1,int i2,int j2,vector<vector<int>>& grid,int n,int m,
vector<vector<vector<int>>>& dp)
{
    if( j1<0 || j1>=m || j2<0 || j2>=m )
    {
        return -1e9;
    }

    if(i1==n-1)
    {
        if(j1==j2)
        {
            return grid[i1][j1];
        }
        else{
            return grid[i1][j1]+grid[i2][j2];
        }
    }

    if(dp[i1][j1][j2]!=-1)
    {
        return dp[i1][j1][j2];
    }

    // explore all possible paths

    int maxi=INT_MIN;

    for(int dj1=-1;dj1<=1;dj1++)
    {
        for(int dj2=-1;dj2<=1;dj2++)
        {
            if(j1==j2)
            {
                maxi = max(maxi,grid[i1][j1]+func(i1+1,j1+dj1,i2+1,j2+dj2,grid,n,m,dp));
            }
            else
            {
                maxi = max(maxi,grid[i1][j1]+grid[i2][j2]+func(i1+1,j1+dj1,i2+1,j2+dj2,grid,n,m,dp));
            }
        }
    }

    return dp[i1][j1][j2] = maxi;
}

int maximumChocolates(int r, int c, vector<vector<int>> &grid) 
{
    // 3d vector id required
    vector<vector<vector<int>>> dp(r,vector<vector<int>> (c,vector<int> (c,-1)));
    return func(0,0,0,c-1,grid,r,c,dp);

}


//Tabulation
#include <bits/stdc++.h> 
int maximumChocolates(int r, int c, vector<vector<int>> &grid) 
{
    vector<vector<vector<int>>> dp(r,vector<vector<int>> (c,vector<int> (c,-1)));
    
    int n = grid.size();
    int m = grid[0].size();
    
    for(int j1=0;j1<m;j1++)
    {
        for(int j2=0;j2<m;j2++)
        {
            if(j1==j2)
            {
                dp[n-1][j1][j2]=grid[n-1][j1];
            }
            else
            {
                dp[n-1][j1][j2]=grid[n-1][j1]+grid[n-1][j2]; 
            }
        }
    }

    for(int i=n-2;i>=0;i--)
    {
        for(int j1=0;j1<m;j1++)
        {
            for(int j2=0;j2<m;j2++)
            {
                int maxi=0;

                for(int dj1=-1;dj1<=1;dj1++)
                {
                    for(int dj2=-1;dj2<=1;dj2++)
                    {
                        int value=0;
                        if(j1==j2)
                        {
                            value = grid[i][j1];
                        }
                        else{
                            value = grid[i][j1] + grid[i][j2];
                        }

    
                        
                        if(j1+dj1>=0 && j1+dj1<m && j2+dj2>=0 && j2+dj2<m)
                        {
                            value=value+dp[i+1][j1+dj1][j2+dj2];
                        }
                        else
                        {
                            value=value+-1e9;
                        }

                        maxi=max(maxi,value);
                    }
                }

                dp[i][j1][j2]=maxi;
                
            }
        }

        
    }

    return dp[0][0][c-1];
}
